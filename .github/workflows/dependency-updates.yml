name: dependency-updates

on:
  push:
    branches: [ main ]
    paths:
      - '**/*.cpp'
      - '**/*.hpp'
      - 'CMakeLists.txt'
      - 'vcpkg.json'
      - '.github/workflows/dependency-updates.yml'
  pull_request:
  workflow_dispatch:

jobs:
  build-and-report:
    runs-on: windows-latest

    # Ensure all commands run inside the MSYS2 MINGW64 shell so MinGW is on PATH
    defaults:
      run:
        shell: msys2 {0}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up MSYS2 (MINGW64)
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            git
            cmake
            make
            jq
            mingw-w64-x86_64-toolchain

      - name: Verify MinGW toolchain
        run: |
          which gcc || true
          which g++ || true
          gcc --version || true
          g++ --version || true
          which make || true

      - name: Set up vcpkg (manifest mode)
        run: |
          git clone --depth=1 https://github.com/microsoft/vcpkg "$GITHUB_WORKSPACE/vcpkg"
          "$GITHUB_WORKSPACE/vcpkg/bootstrap-vcpkg.sh"
          echo "VCPKG_ROOT=$GITHUB_WORKSPACE/vcpkg" >> $GITHUB_ENV

      - name: Restore / install dependencies from manifest
        run: |
          "$VCPKG_ROOT/vcpkg" install --x-manifest-root=. --triplet x64-mingw-dynamic

      - name: Configure (CMake + MinGW Makefiles + vcpkg)
        continue-on-error: true
        id: cmake_configure
        run: |
          cmake -S . -B build -G "MinGW Makefiles" \
            -DCMAKE_TOOLCHAIN_FILE="$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" \
            -DVCPKG_TARGET_TRIPLET=x64-mingw-dynamic \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_SH=CMAKE_SH-NOTFOUND

      - name: Build
        if: steps.cmake_configure.outcome == 'success'
        run: cmake --build build --config Release -- -j2

      # ---- Dependency report section ----
      - name: Generate vcpkg upgrade/diff report
        id: dep_report
        run: |
          set -eo pipefail

          echo "## Dependency Report" >> "$GITHUB_STEP_SUMMARY"

          if [ -f vcpkg.json ]; then
            BASELINE=$(jq -r '."builtin-baseline" // empty' vcpkg.json)
            if [ -n "$BASELINE" ]; then
              echo "**Manifest builtin-baseline:** \`$BASELINE\`" >> "$GITHUB_STEP_SUMMARY"
            fi
          fi

          # 1) What would change if we updated to the latest ports tree?
          echo "### Proposed baseline updates (dry run)" >> "$GITHUB_STEP_SUMMARY"
          {
            "$VCPKG_ROOT/vcpkg" x-update-baseline --dry-run --x-manifest-root=. || true
          } | tee vcpkg-baseline-dryrun.txt
          if [ -s vcpkg-baseline-dryrun.txt ]; then
            echo '\n````\n' >> "$GITHUB_STEP_SUMMARY"
            cat vcpkg-baseline-dryrun.txt >> "$GITHUB_STEP_SUMMARY"
            echo '\n````\n' >> "$GITHUB_STEP_SUMMARY"
          else
            echo "No baseline changes suggested (or command not supported by current vcpkg)." >> "$GITHUB_STEP_SUMMARY"
          fi

          # 2) Which installed packages are upgradeable under current tree?
          echo "### Upgradeable packages (classic listing)" >> "$GITHUB_STEP_SUMMARY"
          {
            "$VCPKG_ROOT/vcpkg" upgrade || true
          } | tee vcpkg-upgrade.txt
          if [ -s vcpkg-upgrade.txt ]; then
            echo '\n````\n' >> "$GITHUB_STEP_SUMMARY"
            cat vcpkg-upgrade.txt >> "$GITHUB_STEP_SUMMARY"
            echo '\n````\n' >> "$GITHUB_STEP_SUMMARY"
          else
            echo "No upgradeable packages detected." >> "$GITHUB_STEP_SUMMARY"
          fi

          # 3) Missing packages (if CMake configure failed due to not found)
          echo "### Missing or not-found packages during CMake configure" >> "$GITHUB_STEP_SUMMARY"
          if [ "${{ steps.cmake_configure.outcome }}" != "success" ]; then
            echo "CMake configure failed; potential missing dependencies:" >> "$GITHUB_STEP_SUMMARY"
            # Surface the last ~100 lines of CMakeError.log and CMakeOutput.log
            if [ -f build/CMakeFiles/CMakeError.log ]; then
              tail -n 200 build/CMakeFiles/CMakeError.log | tee cmake-error-tail.txt
              echo '\n````\n' >> "$GITHUB_STEP_SUMMARY"
              cat cmake-error-tail.txt >> "$GITHUB_STEP_SUMMARY"
              echo '\n````\n' >> "$GITHUB_STEP_SUMMARY"
            fi
            if [ -f build/CMakeFiles/CMakeOutput.log ]; then
              tail -n 200 build/CMakeFiles/CMakeOutput.log | tee cmake-output-tail.txt
              echo '\n````\n' >> "$GITHUB_STEP_SUMMARY"
              cat cmake-output-tail.txt >> "$GITHUB_STEP_SUMMARY"
              echo '\n````\n' >> "$GITHUB_STEP_SUMMARY"
            fi
          else
            echo "CMake configure succeeded; no missing packages detected by CMake." >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Upload dependency artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dependency-report
          path: |
            vcpkg-baseline-dryrun.txt
            vcpkg-upgrade.txt
            cmake-error-tail.txt
            cmake-output-tail.txt
          if-no-files-found: ignore
