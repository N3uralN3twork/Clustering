name: Memory Safety Checks

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  address-sanitizer:
    name: AddressSanitizer & UBSan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc g++ cmake ninja-build

    - name: Set up vcpkg
      run: |
        git clone --depth=1 https://github.com/microsoft/vcpkg "$GITHUB_WORKSPACE/vcpkg"
        "$GITHUB_WORKSPACE/vcpkg/bootstrap-vcpkg.sh"

    - name: Configure with AddressSanitizer
      run: |
        cmake -B build -S . \
          -G "Ninja" \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_CXX_STANDARD=23 \
          -DCMAKE_TOOLCHAIN_FILE="$GITHUB_WORKSPACE/vcpkg/scripts/buildsystems/vcpkg.cmake" \
          -DCMAKE_CXX_FLAGS="-fsanitize=address -fsanitize=undefined -fno-omit-frame-pointer -g" \
          -DCMAKE_EXE_LINKER_FLAGS="-fsanitize=address -fsanitize=undefined" \
          -DBUILD_TESTS=ON

    - name: Build
      run: cmake --build --config Debug build -j $(nproc)

    - name: Run tests with sanitizers
      continue-on-error: true
      run: |
        cd build
        export ASAN_OPTIONS="halt_on_error=0:detect_leaks=1:check_initialization_order=1"
        export UBSAN_OPTIONS="print_stacktrace=1:halt_on_error=0"
        ctest --output-on-failure --timeout 300 2>&1 | tee ../asan_results.txt

    - name: Check for violations
      run: |
        if grep -q "ERROR: \(AddressSanitizer\|UndefinedBehaviorSanitizer\)" asan_results.txt; then
          echo "::error::Sanitizer detected memory/undefined behavior errors!"
          cat asan_results.txt
          exit 1
        else
          echo "✅ No sanitizer errors detected"
        fi

    - name: Upload results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: asan-results
        path: asan_results.txt

  thread-sanitizer:
    name: ThreadSanitizer
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc g++ cmake ninja-build

    - name: Set up vcpkg
      run: |
        git clone --depth=1 https://github.com/microsoft/vcpkg "$GITHUB_WORKSPACE/vcpkg"
        "$GITHUB_WORKSPACE/vcpkg/bootstrap-vcpkg.sh"

    - name: Configure with ThreadSanitizer
      run: |
        cmake -B build -S . \
          -G "Ninja" \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_CXX_STANDARD=23 \
          -DCMAKE_TOOLCHAIN_FILE="$GITHUB_WORKSPACE/vcpkg/scripts/buildsystems/vcpkg.cmake" \
          -DCMAKE_CXX_FLAGS="-fsanitize=thread -fno-omit-frame-pointer -g" \
          -DCMAKE_EXE_LINKER_FLAGS="-fsanitize=thread" \
          -DBUILD_TESTS=ON

    - name: Build
      run: cmake --build --config Debug build -j $(nproc)

    - name: Run tests with ThreadSanitizer
      continue-on-error: true
      run: |
        cd build
        export TSAN_OPTIONS="halt_on_error=0:second_deadlock_stack=1"
        ctest --output-on-failure 2>&1 | tee ../tsan_results.txt

    - name: Check for violations
      run: |
        if grep -q "WARNING: ThreadSanitizer" tsan_results.txt; then
          echo "::error::ThreadSanitizer detected data races!"
          cat tsan_results.txt
          exit 1
        else
          echo "✅ No thread safety issues detected"
        fi

    - name: Upload results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: tsan-results
        path: tsan_results.txt

  static-analysis:
    name: Static Analysis (Clang-Tidy)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang clang-tidy cmake ninja-build

    - name: Set up vcpkg
      run: |
        git clone --depth=1 https://github.com/microsoft/vcpkg "$GITHUB_WORKSPACE/vcpkg"
        "$GITHUB_WORKSPACE/vcpkg/bootstrap-vcpkg.sh"

    - name: Configure project
      run: |
        cmake -B build -S . \
          -G "Ninja" \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_CXX_STANDARD=23 \
          -DCMAKE_TOOLCHAIN_FILE="$GITHUB_WORKSPACE/vcpkg/scripts/buildsystems/vcpkg.cmake" \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
          -DBUILD_TESTS=ON

    - name: Run clang-tidy
      continue-on-error: true
      run: |
        find src include -name "*.cpp" -o -name "*.hpp" | \
          xargs clang-tidy -p build --checks='*,-fuchsia-*,-google-*,-llvm*' \
          2>&1 | tee clang_tidy_results.txt || true

    - name: Generate report
      run: |
        {
          echo "# Static Analysis Results"
          echo ""
          if [ -s clang_tidy_results.txt ]; then
            ERROR_COUNT=$(grep -c "error:" clang_tidy_results.txt || echo "0")
            WARNING_COUNT=$(grep -c "warning:" clang_tidy_results.txt || echo "0")
            echo "- **Errors**: $ERROR_COUNT"
            echo "- **Warnings**: $WARNING_COUNT"
            echo ""
            echo "## Details"
            echo '```'
            cat clang_tidy_results.txt
            echo '```'
            
            if [ "$ERROR_COUNT" -gt 0 ]; then
              echo "::warning::Clang-tidy found $ERROR_COUNT errors"
            fi
          else
            echo "✅ No issues found"
          fi
        } > clang_tidy_report.md

    - name: Upload results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: static-analysis-results
        path: |
          clang_tidy_results.txt
          clang_tidy_report.md

  gcc-warnings:
    name: GCC Strict Warnings
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc g++ cmake ninja-build

    - name: Set up vcpkg
      run: |
        git clone --depth=1 https://github.com/microsoft/vcpkg "$GITHUB_WORKSPACE/vcpkg"
        "$GITHUB_WORKSPACE/vcpkg/bootstrap-vcpkg.sh"

    - name: Configure with strict warnings
      run: |
        cmake -B build -S . \
          -G "Ninja" \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_CXX_STANDARD=23 \
          -DCMAKE_TOOLCHAIN_FILE="$GITHUB_WORKSPACE/vcpkg/scripts/buildsystems/vcpkg.cmake" \
          -DCMAKE_CXX_FLAGS="-Wall -Wextra -Wpedantic -Werror -Wconversion -Wshadow -Wnull-dereference -Wold-style-cast -Wcast-align -Wunused -Woverloaded-virtual -Wformat=2" \
          -DBUILD_TESTS=ON

    - name: Build with strict warnings
      continue-on-error: true
      run: cmake --build build --config Debug -j $(nproc) 2>&1 | tee warnings.txt

    - name: Generate report
      run: |
        {
          echo "# GCC Warning Analysis"
          echo ""
          if [ -s warnings.txt ]; then
            WARNING_COUNT=$(grep -c "warning:" warnings.txt || echo "0")
            ERROR_COUNT=$(grep -c "error:" warnings.txt || echo "0")
            echo "- **Warnings**: $WARNING_COUNT"
            echo "- **Errors**: $ERROR_COUNT"
            echo ""
            echo "## Details"
            echo '```'
            cat warnings.txt
            echo '```'
            
            if [ "$ERROR_COUNT" -gt 0 ]; then
              echo "::error::Build failed with $ERROR_COUNT errors"
              exit 1
            elif [ "$WARNING_COUNT" -gt 0 ]; then
              echo "::warning::Build produced $WARNING_COUNT warnings"
            fi
          else
            echo "✅ No warnings or errors detected"
          fi
        } > warning_report.md

    - name: Upload results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: gcc-warnings
        path: |
          warnings.txt
          warning_report.md

  valgrind:
    name: Valgrind Memory Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc g++ cmake ninja-build valgrind

    - name: Set up vcpkg
      run: |
        git clone --depth=1 https://github.com/microsoft/vcpkg "$GITHUB_WORKSPACE/vcpkg"
        "$GITHUB_WORKSPACE/vcpkg/bootstrap-vcpkg.sh"

    - name: Configure
      run: |
        cmake -B build -S . \
          -G "Ninja" \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_CXX_STANDARD=23 \
          -DCMAKE_TOOLCHAIN_FILE="$GITHUB_WORKSPACE/vcpkg/scripts/buildsystems/vcpkg.cmake" \
          -DCMAKE_CXX_FLAGS="-g -O0" \
          -DBUILD_TESTS=ON

    - name: Build
      run: cmake --build build --config Debug -j $(nproc)

    - name: Run Valgrind
      continue-on-error: true
      run: |
        cd build
        ctest -T memcheck --output-on-failure 2>&1 | tee ../valgrind_results.txt || true

    - name: Check for leaks
      run: |
        if grep -q "definitely lost\|indirectly lost\|possibly lost" valgrind_results.txt; then
          echo "::error::Memory leaks detected!"
          cat valgrind_results.txt
          exit 1
        else
          echo "✅ No memory leaks detected"
        fi

    - name: Upload results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: valgrind-results
        path: valgrind_results.txt

  summary:
    name: Generate Summary Report
    runs-on: ubuntu-latest
    needs: [address-sanitizer, thread-sanitizer, static-analysis, gcc-warnings, valgrind]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate summary
      run: |
        cat > summary.md << 'EOF'
        # Memory Safety Analysis Summary
        
        ## Test Results
        
        | Test | Status |
        |------|--------|
        | AddressSanitizer & UBSan | ${{ needs.address-sanitizer.result == 'success' && '✅ Passed' || '❌ Failed' }} |
        | ThreadSanitizer | ${{ needs.thread-sanitizer.result == 'success' && '✅ Passed' || '❌ Failed' }} |
        | Static Analysis | ${{ needs.static-analysis.result == 'success' && '✅ Passed' || '❌ Failed' }} |
        | GCC Strict Warnings | ${{ needs.gcc-warnings.result == 'success' && '✅ Passed' || '❌ Failed' }} |
        | Valgrind | ${{ needs.valgrind.result == 'success' && '✅ Passed' || '❌ Failed' }} |
        
        ## Environment
        
        - **OS**: Ubuntu Latest
        - **Compiler**: GCC (native)
        - **C++ Standard**: C++23
        - **Build System**: CMake + Ninja
        
        ## Detailed Reports
        
        Individual test results are available in the artifacts:
        - `asan-results`: AddressSanitizer output
        - `tsan-results`: ThreadSanitizer output
        - `static-analysis-results`: Clang-tidy analysis
        - `gcc-warnings`: GCC warning analysis
        - `valgrind-results`: Valgrind memory check
        
        EOF
        
        cat summary.md

    - name: Upload summary
      uses: actions/upload-artifact@v4
      with:
        name: memory-safety-summary
        path: summary.md
    
    - name: Post summary to job
      run: |
        cat summary.md >> $GITHUB_STEP_SUMMARY