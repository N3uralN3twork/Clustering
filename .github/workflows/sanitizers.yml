name: Memory Safety Checks

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM UTC

env:
  VCPKG_BINARY_SOURCES: 'clear;x-gha,readwrite'

jobs:
  mingw-address-sanitizer:
    name: MinGW AddressSanitizer
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup MinGW
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-ninja
          mingw-w64-x86_64-gdb

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgJsonGlob: 'vcpkg.json'

    - name: Export GitHub Actions cache environment variables
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: Configure with AddressSanitizer
      shell: msys2 {0}
      run: |
        cmake -B build -S . \
          -G "Ninja" \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_CXX_STANDARD=23 \
          -DCMAKE_CXX_FLAGS="-fsanitize=address -fsanitize=undefined -fno-omit-frame-pointer -g -std=c++23" \
          -DCMAKE_EXE_LINKER_FLAGS="-fsanitize=address -fsanitize=undefined" \
          -DBUILD_TESTS=ON \
          -DBUILD_BENCHMARKS=OFF

    - name: Build with ASan
      shell: msys2 {0}
      run: |
        cmake --build build -j $(nproc)

    - name: Run tests with AddressSanitizer
      shell: msys2 {0}
      continue-on-error: true
      run: |
        cd build
        export ASAN_OPTIONS="halt_on_error=1:detect_leaks=1:check_initialization_order=1"
        export UBSAN_OPTIONS="print_stacktrace=1:halt_on_error=1"
        ctest --output-on-failure --timeout 300 > ../asan_results.txt 2>&1

    - name: Check for ASan violations
      shell: pwsh
      run: |
        if (Test-Path asan_results.txt) {
          $content = Get-Content asan_results.txt -Raw
          if ($content -match "ERROR: (AddressSanitizer|UndefinedBehaviorSanitizer)") {
            Write-Host "::error::Sanitizer detected memory/undefined behavior errors!"
            Get-Content asan_results.txt
            exit 1
          } else {
            Write-Host "✅ No sanitizer errors detected"
          }
        }

    - name: Upload ASan results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: asan-results
        path: asan_results.txt

  mingw-thread-sanitizer:
    name: MinGW ThreadSanitizer
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup MinGW
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-ninja

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11

    - name: Configure with ThreadSanitizer
      shell: msys2 {0}
      run: |
        cmake -B build -S . \
          -G "Ninja" \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_CXX_STANDARD=23 \
          -DCMAKE_CXX_FLAGS="-fsanitize=thread -fno-omit-frame-pointer -g -std=c++23" \
          -DCMAKE_EXE_LINKER_FLAGS="-fsanitize=thread" \
          -DBUILD_TESTS=ON

    - name: Build
      shell: msys2 {0}
      run: cmake --build build -j $(nproc)

    - name: Run tests with ThreadSanitizer
      shell: msys2 {0}
      continue-on-error: true
      run: |
        cd build
        export TSAN_OPTIONS="halt_on_error=1:second_deadlock_stack=1"
        ctest --output-on-failure > ../tsan_results.txt 2>&1

    - name: Check for TSan violations
      shell: pwsh
      run: |
        if (Test-Path tsan_results.txt) {
          $content = Get-Content tsan_results.txt -Raw
          if ($content -match "WARNING: ThreadSanitizer") {
            Write-Host "::error::ThreadSanitizer detected data races!"
            Get-Content tsan_results.txt
            exit 1
          } else {
            Write-Host "✅ No ThreadSanitizer errors detected"
          }
        }

    - name: Upload TSan results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: tsan-results
        path: tsan_results.txt

  static-analysis:
    name: Static Analysis (CppCheck)
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup MinGW
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-ninja
          mingw-w64-x86_64-cppcheck

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11

    - name: Configure project
      shell: msys2 {0}
      run: |
        cmake -B build -S . \
          -G "Ninja" \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_CXX_STANDARD=23 \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
          -DBUILD_TESTS=ON

    - name: Run CppCheck
      shell: msys2 {0}
      continue-on-error: true
      run: |
        cppcheck --project=build/compile_commands.json \
          --enable=all \
          --inconclusive \
          --std=c++23 \
          --xml \
          --xml-version=2 \
          --suppress=missingIncludeSystem \
          --suppress=unmatchedSuppression \
          -I include \
          src/ \
          2> cppcheck_report.xml

    - name: Convert CppCheck results to readable format
      shell: pwsh
      run: |
        if (Test-Path cppcheck_report.xml) {
          [xml]$xml = Get-Content cppcheck_report.xml
          $errors = $xml.results.errors.error
          
          if ($errors) {
            echo "# CppCheck Analysis Results" > cppcheck_report.md
            echo "" >> cppcheck_report.md
            echo "| Severity | File | Line | Message |" >> cppcheck_report.md
            echo "|----------|------|------|---------|" >> cppcheck_report.md
            
            foreach ($error in $errors) {
              $severity = $error.severity
              $msg = $error.msg
              $file = $error.location.file
              $line = $error.location.line
              echo "| $severity | $file | $line | $msg |" >> cppcheck_report.md
            }
            
            # Check for high-severity issues
            $criticalErrors = $errors | Where-Object { $_.severity -in @("error", "warning") }
            if ($criticalErrors) {
              Write-Host "::warning::CppCheck found $($criticalErrors.Count) critical issues"
            }
          } else {
            echo "# CppCheck Analysis Results" > cppcheck_report.md
            echo "" >> cppcheck_report.md
            echo "✅ No issues found" >> cppcheck_report.md
          }
        }

    - name: Upload CppCheck results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: cppcheck-results
        path: |
          cppcheck_report.xml
          cppcheck_report.md

  gcc-warnings:
    name: GCC Warning Analysis (C++23)
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup MinGW
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-ninja

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11

    - name: Configure with strict warnings
      shell: msys2 {0}
      run: |
        cmake -B build -S . \
          -G "Ninja" \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_CXX_STANDARD=23 \
          -DCMAKE_CXX_FLAGS="-Wall -Wextra -Wpedantic -Werror -Wconversion -Wshadow -Wnull-dereference -Wold-style-cast -Wcast-align -Wunused -Woverloaded-virtual -Wpedantic -Wformat=2 -std=c++23" \
          -DBUILD_TESTS=ON

    - name: Build with strict warnings
      shell: msys2 {0}
      continue-on-error: true
      run: |
        cmake --build build -j $(nproc) 2> warnings.txt

    - name: Analyze warnings
      shell: pwsh
      run: |
        if (Test-Path warnings.txt) {
          $content = Get-Content warnings.txt -Raw
          if ($content) {
            Write-Host "::warning::Build produced warnings"
            Get-Content warnings.txt
            
            # Count warnings
            $warningCount = ([regex]::Matches($content, "warning:")).Count
            $errorCount = ([regex]::Matches($content, "error:")).Count
            
            echo "# GCC Warning Analysis" > warning_report.md
            echo "" >> warning_report.md
            echo "- **Warnings**: $warningCount" >> warning_report.md
            echo "- **Errors**: $errorCount" >> warning_report.md
            echo "" >> warning_report.md
            echo "## Details" >> warning_report.md
            echo '```' >> warning_report.md
            Get-Content warnings.txt >> warning_report.md
            echo '```' >> warning_report.md
            
            if ($errorCount -gt 0) {
              exit 1
            }
          } else {
            Write-Host "✅ No warnings detected"
            echo "# GCC Warning Analysis" > warning_report.md
            echo "" >> warning_report.md
            echo "✅ No warnings or errors detected" >> warning_report.md
          }
        }

    - name: Upload warning report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: gcc-warnings
        path: |
          warnings.txt
          warning_report.md

  memory-leak-valgrind:
    name: Memory Leak Detection (Valgrind-like)
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup MinGW
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-ninja

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11

    - name: Configure with Debug info
      shell: msys2 {0}
      run: |
        cmake -B build -S . \
          -G "Ninja" \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_CXX_STANDARD=23 \
          -DCMAKE_CXX_FLAGS="-g -O0 -std=c++23" \
          -DBUILD_TESTS=ON

    - name: Build
      shell: msys2 {0}
      run: cmake --build build -j $(nproc)

    - name: Run tests with leak detection (via ASan)
      shell: msys2 {0}
      continue-on-error: true
      run: |
        cd build
        # Use ASan's leak detection as alternative to Valgrind on Windows
        export ASAN_OPTIONS="detect_leaks=1:fast_unwind_on_malloc=0"
        cmake -DCMAKE_CXX_FLAGS="-fsanitize=address -g -O0 -std=c++23" \
              -DCMAKE_EXE_LINKER_FLAGS="-fsanitize=address" ..
        cmake --build . -j $(nproc)
        ctest --output-on-failure > ../leak_detection.txt 2>&1

    - name: Check for leaks
      shell: pwsh
      run: |
        if (Test-Path leak_detection.txt) {
          $content = Get-Content leak_detection.txt -Raw
          if ($content -match "memory leak|Direct leak|Indirect leak") {
            Write-Host "::error::Memory leaks detected!"
            Get-Content leak_detection.txt
            exit 1
          } else {
            Write-Host "✅ No memory leaks detected"
          }
        }

    - name: Upload leak detection results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: leak-detection-results
        path: leak_detection.txt

  summary:
    name: Memory Safety Summary
    runs-on: windows-latest
    needs: [mingw-address-sanitizer, mingw-thread-sanitizer, static-analysis, gcc-warnings, memory-leak-valgrind]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate summary report
      shell: pwsh
      run: |
        echo "# Memory Safety Analysis Summary (MinGW + C++23)" > summary.md
        echo "" >> summary.md
        echo "## Test Results" >> summary.md
        echo "" >> summary.md
        
        # Check each job result
        $jobs = @{
          "MinGW AddressSanitizer" = "${{ needs.mingw-address-sanitizer.result }}"
          "MinGW ThreadSanitizer" = "${{ needs.mingw-thread-sanitizer.result }}"
          "Static Analysis" = "${{ needs.static-analysis.result }}"
          "GCC Warnings" = "${{ needs.gcc-warnings.result }}"
          "Memory Leak Detection" = "${{ needs.memory-leak-valgrind.result }}"
        }
        
        foreach ($job in $jobs.GetEnumerator()) {
          $status = if ($job.Value -eq "success") { "✅ Passed" } else { "❌ Failed" }
          echo "- **$($job.Key)**: $status" >> summary.md
        }
        
        echo "" >> summary.md
        echo "## Compiler Information" >> summary.md
        echo "- **Compiler**: MinGW GCC" >> summary.md
        echo "- **C++ Standard**: C++23" >> summary.md
        echo "- **Build System**: CMake + Ninja" >> summary.md
        echo "" >> summary.md
        echo "## Details" >> summary.md
        echo "See individual job artifacts for detailed reports." >> summary.md

    - name: Upload summary
      uses: actions/upload-artifact@v4
      with:
        name: memory-safety-summary
        path: summary.md
